[
  // === Tab Navigation (Current Group Only) ===
  {
    "key": "cmd+shift+right",
    "command": "workbench.action.nextEditorInGroup",
    "when": "!terminalFocusInAny"
  },
  {
    "key": "cmd+shift+left",
    "command": "workbench.action.previousEditorInGroup",
    "when": "!terminalFocusInAny"
  },
  // Remove conflicting default keybindings for AST selection
  {
    "key": "cmd+shift+right",
    "command": "-editor.action.smartSelect.expand"
  },
  {
    "key": "cmd+shift+left",
    "command": "-editor.action.smartSelect.shrink"
  },

  // === Resize the current selected pane ===
  {
    "key": "ctrl+=",
    "command": "workbench.action.increaseViewSize"
  },
  {
    "key": "ctrl+-",
    "command": "workbench.action.decreaseViewSize"
  },

  // === File & Project Navigation ===
  {
    "key": "cmd+shift+o",
    "command": "workbench.action.openRecent"
  },
  {
    "key": "ctrl+cmd+o",
    "command": "workbench.action.gotoSymbol",
    "when": "!accessibilityHelpIsShown && !accessibleViewIsShown"
  },
  {
    "key": "shift+cmd+o",
    "command": "-workbench.action.gotoSymbol",
    "when": "!accessibilityHelpIsShown && !accessibleViewIsShown"
  },
  // Add, rename, select file in explorer
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "r",
    "command": "renameFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "enter",
    "command": "-renameFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },

  // === Vim Command Line Popup ===
  {
    "key": "shift+;",
    "command": "vim.showQuickpickCmdLine",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  // === Vim-like Navigation (App Wide) ===
  {
    "key": "ctrl+h",
    "command": "workbench.action.navigateLeft"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.navigateDown"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.navigateUp"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.navigateRight"
  },

  // === Paging (Nvim Behavior) ===
  {
    "key": "ctrl+down",
    "command": "cursorPageDown",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+up",
    "command": "cursorPageUp",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+down",
    "command": "list.focusPageDown",
    "when": "listFocus"
  },
  {
    "key": "ctrl+up",
    "command": "list.focusPageUp",
    "when": "listFocus"
  },
  // Emmet wrap tags
  {
    "key": "cmd+m",
    "command": "editor.emmet.action.wrapWithAbbreviation"
  },

  // === Which-key Controls ===
  {
    "key": "space",
    "command": "whichkey.show",
    "when": "editorTextFocus && vim.mode == 'Normal'"
  },
  {
    "key": "space",
    "command": "whichkey.show",
    "when": "editorTextFocus && vim.mode == 'Visual'"
  },
  {
    "key": "backspace",
    "command": "whichkey.undoKey",
    "when": "whichkeyVisible"
  },

  // === Terminal Controls ===
  // Toggle the terminal and associated behaviors
  {
    "key": "cmd+;",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "!terminal.active"
  },
  {
    "key": "cmd+;",
    "command": "workbench.action.togglePanel",
    "when": "terminal.active"
  },
  {
    "key": "cmd+t",
    "command": "workbench.action.terminal.new",
    "when": "terminalFocusInAny"
  },
  // Removes conflicting keybindings for new tab in terminal command
  {
    "key": "cmd+t",
    "command": "-workbench.action.showAllSymbols"
  },

  // Cycle terminal tabs (instances)
  {
    "key": "cmd+shift+right",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocusInAny"
  },
  {
    "key": "cmd+shift+left",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocusInAny"
  },

  // Maximize the terminal
  {
    "key": "cmd+shift+m",
    "command": "workbench.action.toggleMaximizedPanel",
    "when": "panelAlignment == 'center' || panelPosition != 'bottom' && panelPosition != 'top'"
  }
]
